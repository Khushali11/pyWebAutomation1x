{"name": "test_vwologin_negative", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: chrome=120.0.6099.225)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6DDAB2142+3514994]\n\t(No symbol) [0x00007FF6DD6D0CE2]\n\t(No symbol) [0x00007FF6DD5776AA]\n\t(No symbol) [0x00007FF6DD560839]\n\t(No symbol) [0x00007FF6DD5606EB]\n\t(No symbol) [0x00007FF6DD55EE3D]\n\t(No symbol) [0x00007FF6DD55F7CE]\n\t(No symbol) [0x00007FF6DD56D6CD]\n\t(No symbol) [0x00007FF6DD584471]\n\t(No symbol) [0x00007FF6DD58937A]\n\t(No symbol) [0x00007FF6DD55FEC6]\n\t(No symbol) [0x00007FF6DD5841CF]\n\t(No symbol) [0x00007FF6DD602824]\n\t(No symbol) [0x00007FF6DD5E5D93]\n\t(No symbol) [0x00007FF6DD5B4BDC]\n\t(No symbol) [0x00007FF6DD5B5C64]\n\tGetHandleVerifier [0x00007FF6DDADE16B+3695259]\n\tGetHandleVerifier [0x00007FF6DDB36737+4057191]\n\tGetHandleVerifier [0x00007FF6DDB2E4E3+4023827]\n\tGetHandleVerifier [0x00007FF6DD8004F9+689705]\n\t(No symbol) [0x00007FF6DD6DC048]\n\t(No symbol) [0x00007FF6DD6D8044]\n\t(No symbol) [0x00007FF6DD6D81C9]\n\t(No symbol) [0x00007FF6DD6C88C4]\n\tBaseThreadInitThunk [0x00007FFCD8FE7344+20]\n\tRtlUserThreadStart [0x00007FFCDA3226B1+33]", "trace": "request = <SubRequest 'setup' for <Function test_vwologin_negative>>\n\n    @pytest.fixture(scope=\"class\")\n    def setup(request):\n        driver = webdriver.Chrome()\n        # driver.maximize_window()\n    \n        username = os.getenv(\"NAME\")\n        password = os.getenv(\"PASSWORD\")\n        base_url = os.getenv(\"BASE_URL\")\n>       driver.get(base_url)\n\n..\\conftest.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:357: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021C538D45C0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 3...07FF6DD6C88C4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCD8FE7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFCDA3226B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\nE         (Session info: chrome=120.0.6099.225)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6DDAB2142+3514994]\nE       \t(No symbol) [0x00007FF6DD6D0CE2]\nE       \t(No symbol) [0x00007FF6DD5776AA]\nE       \t(No symbol) [0x00007FF6DD560839]\nE       \t(No symbol) [0x00007FF6DD5606EB]\nE       \t(No symbol) [0x00007FF6DD55EE3D]\nE       \t(No symbol) [0x00007FF6DD55F7CE]\nE       \t(No symbol) [0x00007FF6DD56D6CD]\nE       \t(No symbol) [0x00007FF6DD584471]\nE       \t(No symbol) [0x00007FF6DD58937A]\nE       \t(No symbol) [0x00007FF6DD55FEC6]\nE       \t(No symbol) [0x00007FF6DD5841CF]\nE       \t(No symbol) [0x00007FF6DD602824]\nE       \t(No symbol) [0x00007FF6DD5E5D93]\nE       \t(No symbol) [0x00007FF6DD5B4BDC]\nE       \t(No symbol) [0x00007FF6DD5B5C64]\nE       \tGetHandleVerifier [0x00007FF6DDADE16B+3695259]\nE       \tGetHandleVerifier [0x00007FF6DDB36737+4057191]\nE       \tGetHandleVerifier [0x00007FF6DDB2E4E3+4023827]\nE       \tGetHandleVerifier [0x00007FF6DD8004F9+689705]\nE       \t(No symbol) [0x00007FF6DD6DC048]\nE       \t(No symbol) [0x00007FF6DD6D8044]\nE       \t(No symbol) [0x00007FF6DD6D81C9]\nE       \t(No symbol) [0x00007FF6DD6C88C4]\nE       \tBaseThreadInitThunk [0x00007FFCD8FE7344+20]\nE       \tRtlUserThreadStart [0x00007FFCDA3226B1+33]\n\n..\\..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: TimeoutException"}, "start": 1705734557021, "stop": 1705734557021, "uuid": "3f1ef14c-3b6d-4f41-aa5c-9648c1aa7e6d", "historyId": "e6fee6239a6cb853ef9b1e6a0fddc9d8", "testCaseId": "e6fee6239a6cb853ef9b1e6a0fddc9d8", "fullName": "tests.vwoLoginTests.pom.test_vwologin_pom.TestLogin#test_vwologin_negative", "labels": [{"name": "epic", "value": "VWO Login Test"}, {"name": "feature", "value": "TC#0 VWO App NegativeTest"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "tests.vwoLoginTests.pom"}, {"name": "suite", "value": "test_vwologin_pom"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "DESKTOP-96THO3E"}, {"name": "thread", "value": "12068-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.vwoLoginTests.pom.test_vwologin_pom"}]}