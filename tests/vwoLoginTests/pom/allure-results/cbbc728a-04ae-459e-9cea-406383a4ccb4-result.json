{"name": "test_katalon_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\n  (Session info: chrome=120.0.6099.225)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6B9862142+3514994]\n\t(No symbol) [0x00007FF6B9480CE2]\n\t(No symbol) [0x00007FF6B93276AA]\n\t(No symbol) [0x00007FF6B9310839]\n\t(No symbol) [0x00007FF6B93106EB]\n\t(No symbol) [0x00007FF6B930EE3D]\n\t(No symbol) [0x00007FF6B930F7CE]\n\t(No symbol) [0x00007FF6B931D6CD]\n\t(No symbol) [0x00007FF6B9334471]\n\t(No symbol) [0x00007FF6B933937A]\n\t(No symbol) [0x00007FF6B930FEC6]\n\t(No symbol) [0x00007FF6B93341CF]\n\t(No symbol) [0x00007FF6B93B2824]\n\t(No symbol) [0x00007FF6B9395D93]\n\t(No symbol) [0x00007FF6B9364BDC]\n\t(No symbol) [0x00007FF6B9365C64]\n\tGetHandleVerifier [0x00007FF6B988E16B+3695259]\n\tGetHandleVerifier [0x00007FF6B98E6737+4057191]\n\tGetHandleVerifier [0x00007FF6B98DE4E3+4023827]\n\tGetHandleVerifier [0x00007FF6B95B04F9+689705]\n\t(No symbol) [0x00007FF6B948C048]\n\t(No symbol) [0x00007FF6B9488044]\n\t(No symbol) [0x00007FF6B94881C9]\n\t(No symbol) [0x00007FF6B94788C4]\n\tBaseThreadInitThunk [0x00007FFCD8FE7344+20]\n\tRtlUserThreadStart [0x00007FFCDA3226B1+33]", "trace": "self = <tests.vwoLoginTests.pom.test_katalon_pom.TestLogin object at 0x00000221313EC110>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bc85afeef5135acad37b5f77bf7191de\")>\n\n    @allure.epic(\"Katalong home Test\")\n    @allure.feature(\"TC#0 Katalong home page\")\n    @pytest.mark.usefixtures(\"setup\")\n    def test_katalon_login(self, setup):\n        driver = setup\n>       driver.get(self.katalon_url)\n\ntest_katalon_pom.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:357: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000221316D4CE0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 3...07FF6B94788C4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCD8FE7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFCDA3226B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 300.000\nE         (Session info: chrome=120.0.6099.225)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6B9862142+3514994]\nE       \t(No symbol) [0x00007FF6B9480CE2]\nE       \t(No symbol) [0x00007FF6B93276AA]\nE       \t(No symbol) [0x00007FF6B9310839]\nE       \t(No symbol) [0x00007FF6B93106EB]\nE       \t(No symbol) [0x00007FF6B930EE3D]\nE       \t(No symbol) [0x00007FF6B930F7CE]\nE       \t(No symbol) [0x00007FF6B931D6CD]\nE       \t(No symbol) [0x00007FF6B9334471]\nE       \t(No symbol) [0x00007FF6B933937A]\nE       \t(No symbol) [0x00007FF6B930FEC6]\nE       \t(No symbol) [0x00007FF6B93341CF]\nE       \t(No symbol) [0x00007FF6B93B2824]\nE       \t(No symbol) [0x00007FF6B9395D93]\nE       \t(No symbol) [0x00007FF6B9364BDC]\nE       \t(No symbol) [0x00007FF6B9365C64]\nE       \tGetHandleVerifier [0x00007FF6B988E16B+3695259]\nE       \tGetHandleVerifier [0x00007FF6B98E6737+4057191]\nE       \tGetHandleVerifier [0x00007FF6B98DE4E3+4023827]\nE       \tGetHandleVerifier [0x00007FF6B95B04F9+689705]\nE       \t(No symbol) [0x00007FF6B948C048]\nE       \t(No symbol) [0x00007FF6B9488044]\nE       \t(No symbol) [0x00007FF6B94881C9]\nE       \t(No symbol) [0x00007FF6B94788C4]\nE       \tBaseThreadInitThunk [0x00007FFCD8FE7344+20]\nE       \tRtlUserThreadStart [0x00007FFCDA3226B1+33]\n\n..\\..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: TimeoutException"}, "start": 1707184774321, "stop": 1707185074415, "uuid": "aba8c641-5303-4323-b0ba-70de1d025ae9", "historyId": "d5aa68fb3ca8fa135e5ba489b8af2198", "testCaseId": "d5aa68fb3ca8fa135e5ba489b8af2198", "fullName": "tests.vwoLoginTests.pom.test_katalon_pom.TestLogin#test_katalon_login", "labels": [{"name": "feature", "value": "TC#0 Katalong home page"}, {"name": "epic", "value": "Katalong home Test"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "tests.vwoLoginTests.pom"}, {"name": "suite", "value": "test_katalon_pom"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "DESKTOP-96THO3E"}, {"name": "thread", "value": "8724-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.vwoLoginTests.pom.test_katalon_pom"}]}